# Run the following to get a single consolidated checkpoint file e.g. `checkpoint_last_consolidated.pt
"""
model_dir=/private/home/myasu/projects/cm3-metaseq_minimum/models/vanilla
python -m metaseq.scripts.consolidate_fsdp_shards $model_dir/checkpoint_last --new_arch_name transformer_lm
"""


import random
import json, os, re
import numpy as np
from tqdm import tqdm
from typing import Any, Dict, Iterator, List, Optional
from tokenizers import (
    ByteLevelBPETokenizer,
    Tokenizer,
    decoders,
    models,
    normalizers,
    pre_tokenizers,
)
from tokenizers.pre_tokenizers import ByteLevel, Digits
from metaseq.service.utils import encode_fn

TOKENIZER_FILE = "/shared/home/roller/V262144_I8192_S512_M512_R1024.json"


def load_tokenizer():
    tokenizer = Tokenizer(models.Unigram()).from_file(TOKENIZER_FILE)
    tokenizer.normalizer = normalizers.NFKC()
    tokenizer.pre_tokenizer = pre_tokenizers.Sequence(
        [ByteLevel(), Digits(individual_digits=True)]
    )
    tokenizer.decoder = decoders.ByteLevel()
    return tokenizer


tokenizer = load_tokenizer()


def set_seed(seed):
    random.seed(seed)
    np.random.seed(seed)
    torch.manual_seed(seed)
    torch.cuda.manual_seed(seed)


import torch
from metaseq.models.transformer_lm import TransformerLanguageModel


prompt1 = '<img alt="sushi is sitting on a wooden table in a restaurant" src="'
prompt2 = (
    " ".join(
        """
I7720 I3153 I5156 I3573 I8016 I203 I3282 I1521 I2676 I3734 I4478 I4535 I6167
I6096 I4160 I8038 I4771 I50 I3900 I7609 I6978 I2742 I3228 I5762 I3326 I2095
I5551 I2995 I6175 I5034 I6203 I2615 I3223 I4530 I3526 I8184 I5621 I5734 I6299
I7330 I3403 I1964 I3526 I5813 I3615 I4196 I7813 I3202 I3084 I8072 I3282 I7799
I3566 I3371 I2479 I299 I4852 I2501 I4998 I177 I1765 I8022 I1651 I5156 I6131
I7801 I5621 I2041 I566 I4031 I1867 I5865 I393 I3734 I3827 I7408 I4535 I4535
I5783 I5428 I4510 I1223 I7859 I6926 I814 I6051 I8070 I2382 I3223 I5059 I2750
I7436 I3459 I162 I3223 I1544 I1594 I4385 I2565 I3686 I3615 I4031 I4266 I72
I4872 I5679 I1508 I5813 I3727 I1249 I1805 I6978 I1816 I5034 I7609 I5143 I3084
I3892 I5650 I7739 I4111 I1765 I7568 I2411 I6523 I7710 I5538 I3371 I4839 I7801
I3282 I5076 I5446 I2565 I3955 I7713 I3003 I7298 I3827 I3186 I7705 I1145 I4630
I3223 I8029 I1766 I3524 I1477 I240 I162 I5846 I6499 I3770 I7911 I7481 I7458
I443 I517 I1727 I2407 I847 I4760 I6096 I8169 I4607 I1964 I1753 I299 I3479 I575
I7123 I444 I1583 I4760 I964 I6360 I7609 I5733 I7558 I4874 I7502 I3900 I6384
I3655 I4762 I6948 I1023 I976 I7617 I3794 I7817 I1391 I7221 I3853 I4760 I1394
I666 I5342 I1447 I6406 I5588 I5342 I6090 I6090 I1447 I7280 I221 I777 I5752
I5649 I5547 I5931 I5762 I4887 I1751 I1102 I6758 I6131 I2742 I5064 I6870 I3664
I5060 I591 I6425 I4760 I659 I1248 I4834 I3260 I3573 I1964 I1054 I1170 I1538
I4965 I3244 I5088 I3419 I6523 I6964 I3706 I5701 I1075 I58 I2656 I2022 I4266
I4082 I2269 I139 I7773 I5817 I976 I5151 I2420 I5614 I4562 I5050 I6161 I3003
I4167 I5074 I3255 I3686 I6084 I5880 I4535 I575 I2778 I6021 I72 I3794 I5789
I5932 I5932 I4762 I162 I1788 I4031 I5549 I5679 I2425 I6891 I1366 I5846 I6663
I6021 I6928 I6242 I6406 I3419 I1248 I8016 I4632 I2189 I6084 I3550 I4026 I2778
I3282 I4716 I4031 I5880 I7280 I7230 I3186 I136 I7288 I7408 I2535 I1505 I2535
I5055 I2488 I2927 I6462 I2088 I7799 I1054 I3479 I6167 I1056 I2565 I1447 I4148
I5483 I1294 I6084 I5846 I4196 I1245 I471 I2415 I6490 I938 I5621 I595 I5915
I2590 I3985 I1851 I1867 I7471 I5533 I2496 I4834 I6152 I5076 I3069 I4607 I1538
I5076 I1867 I1056 I4985 I5870 I7020 I3413 I5629 I8016 I659 I6084 I7686 I5734
I7471 I3291 I8016 I5005 I203 I3413 I228 I4676 I3072 I7471 I5500 I3565 I4160
I1929 I3550 I3674 I3623 I3550 I3291 I3686 I1115 I6406 I4985 I5646 I4795 I4465
I1916 I6161 I5987 I7870 I1807 I98 I3399 I240 I8029 I5789 I2491 I2496 I4551
I6155 I3054 I4293 I6144 I7874 I2496 I7996 I5410 I1115 I6793 I2882 I7783 I659
I4695 I5329 I1391 I5846 I2623 I595 I5154 I5104 I3637 I2130 I2130 I5748 I5034
I3383 I8103 I938 I5802 I3623 I7787 I7494 I6548 I4530 I5629 I4727 I1929 I4441
I4499 I348 I5734 I6735 I3641 I8103 I3255 I7397 I2420 I2425 I4674 I4674 I6144
I5521 I4760 I6084 I3354 I3054 I1394 I8184 I1765 I8184 I2069 I5446 I4111 I6870
I4906 I4954 I766 I3815 I3279 I7874 I2491 I3228 I5156 I7937 I3604 I5813 I1497
I7481 I1141 I2873 I5748 I3573 I2265 I7797 I7016 I4220 I3729 I2130 I1373 I7870
I6596 I4650 I4478 I4220 I4551 I3459 I4356 I6978 I3623 I3304 I3054 I11 I2212
I8070 I7024 I3604 I3459 I3442 I4906 I6051 I6830 I6596 I2083 I808 I3399 I3354
I7397 I2130 I1141 I6657 I7481 I7885 I1294 I7445 I777 I1521 I7330 I471 I2138
I437 I5428 I3024 I5677 I6257 I8071 I4557 I1766 I111 I2491 I2491 I1394 I2130
I5050 I4581 I5701 I7708 I3022 I527 I4510 I7472 I3641 I7708 I8166 I4378 I964
I1982 I1870 I1982 I3473 I917 I964 I3496 I1102 I6365 I1033 I847 I847 I5277 I4562
I3795 I2309 I5813 I5501 I2787 I4033 I1751 I6096 I7705 I6412 I1291 I527 I4378
I7739 I2467 I7739 I2467 I7513 I6926 I3076 I4478 I4019 I6964 I4630 I1576 I6451
I2467 I1982 I7739 I6028 I5792 I7864 I8103 I6566 I4911 I2491 I8154 I629 I2069
I4526 I1102 I3733 I7739 I2467 I2314 I6948 I2501 I3008 I7864 I4510 I4920 I2227
I6655 I5857 I6136 I5106 I1294 I7129 I2770 I3733 I6726 I3733 I6054 I7192 I1851
I2034 I3153 I2069 I5857 I592 I3733 I7739 I3473 I3473 I6726 I7203 I7914 I5783
I7185 I6084 I1823 I7854 I5846 I2382 I1964 I438 I360 I1269 I3279 I7068 I2340
I2527 I3198 I6472 I2236 I1594 I2425 I4771 I6131 I3473 I2467 I964 I6451 I7129
I6913 I4604 I1373 I3304 I3777 I5218 I3675 I2372 I3899 I2607 I2656 I6720 I2223
I7813 I3777 I8103 I2138 I6412 I1083 I7314 I7562 I3628 I3628 I8070 I1033 I271
I4804 I1870 I6372 I5870 I390 I107 I5456 I3198 I7937 I629 I4441 I3729 I629 I1075
I993 I4604 I7190 I5470 I92 I254 I7230 I1430 I3802 I847 I7859 I4819 I2458 I6482
I1141 I1741 I3098 I7436 I7799 I5458 I5280 I5195 I8073 I2189 I4655 I7259 I5944
I3825 I1033 I6999 I4521 I254 I1447 I4872 I2236 I7129 I5838 I2365 I949 I1372
I1751 I4762 I6970 I7600 I2165 I7690 I7067 I3718 I339 I4042 I5047 I2623 I3291
I3734 I5458 I36 I4645 I7068 I5104 I3115 I1805 I3479 I6069 I6978 I1102 I6451
I7361 I1151 I3008 I6523 I1766 I7957 I5581 I8013 I3592 I1030 I6486 I1983 I4816
I6726 I6726 I3908 I1847 I3399 I3637 I2130 I5621 I4026 I3337 I3590 I7739 I4645
I7911 I3590 I3124 I7739 I6451 I5195 I5599 I6272 I3118 I517 I6010 I7604 I3306
I5055 I4457 I360 I4498 I2488 I2069 I3823 I4378 I6451 I7881 I3933 I3526 I7787
I5050 I6964 I808 I2491 I591 I7560 I76 I964 I643 I4290 I2501 I3644 I6360 I1102
I7394 I6043 I5047 I3783 I3566 I4979 I5677 I7797 I1216 I367 I3770 I5608 I3733
I523 I3202 I1845 I6219 I808 I4509 I2130 I3933 I1755 I1259 I3054 I2565 I4031
I3385 I36 I2467 I7402 I5429 I1520 I390 I1870 I4762 I2616 I6451 I985 I3709 I2426
I3997 I6126 I4082 I1195 I4931 I5650 I1923 I3801 I7629 I7996 I5218 I6490 I6161
I2895 I2044 I497 I3228 I7494 I3550 I4031 I7280 I2705 I2467 I2467 I7996 I6051
I5473 I7156 I6028 I3473 I3257 I8073 I36 I850 I7229 I2121 I4620 I3198 I4082
I6783 I5646 I3065 I6365 I6978 I444 I5050 I4552 I6735 I6119 I6425 I703 I5470
I3050 I3686 I3371 I471 I7156 I2467 I5195 I5468 I1594 I7445 I3395 I6726 I7277
I5608 I5792 I6043 I5329 I36 I7288 I7708 I777 I7609 I2130 I4290 I1372 I7230
I6478 I8180 I6934 I2873 I6425 I703 I808 I4521 I3255 I5734 I1861 I4632 I1594
I1536 I2467 I4893 I2486 I3083 I1510 I985 I4958 I7511 I7885 I4501 I2562 I7185
I5857 I7397 I2774 I5215 I6478 I6773 I4045 I8166 I7562 I3490 I6425 I6490 I4795
I7512 I5120 I4781 I1497 I8103 I575 I2237 I4607 I76 I36 I5792 I7161 I6570 I3733
I1957 I5804 I7057 ">
""".strip().split()
    )
    + " "
)

from metaseq import options
from metaseq.hub_utils import GeneratorInterface
from metaseq.dataclass.utils import convert_namespace_to_omegaconf

parser = options.get_generation_parser()
args = options.parse_args_and_arch(
    parser,
    input_args=[
        '--task',
        'cm3_language_modeling_inference_for_models_trained_with_streaming',
        '--spm-path',
        '/shared/home/roller/V262144_I8192_S512_M512_R1024.json',
        '--path',
        '/shared/home/roller/checkpoint_47_40000_consolidated_inference.pt',
        # '--beam',
        # '1',
        # '--temperature',
        # '0.0',
        '--bpe',
        'hf_cm3_unigram',
        '/tmp',
    ],
)
args.data = "foo"
cfg = convert_namespace_to_omegaconf(args)

gi = GeneratorInterface(cfg)
gi.load_model()
text_tokens = list(gi.bpe.bpe.encode(prompt1).ids)
text_tokens = [2, 0] + text_tokens
# text_tokens += [1] * (256 - len(text_tokens))
img_tokens = list(gi.bpe.bpe.encode(prompt2).ids)
tokens_orig = text_tokens
print(tokens_orig)

print(gi.generate(inputs=[tokens_orig], echo=True, max_tokens=[1]))
